#!/usr/bin/perl

use strict;
use warnings;

# Initialise environment for this project
BEGIN { use File::Basename qw(dirname); unshift @INC, dirname(__FILE__); }
use RachelPerlSetup;

use Carp;
use English qw(-no_match_vars);
use Getopt::Long;
use Log::Any qw($log);
use Readonly;

Readonly::Hash my %COMMAND_HANDLERS => (
    list  => 'Rachel::Build::CommandLine::ListCommand',
    fetch => 'Rachel::Build::CommandLine::FetchCommand',
);

Readonly::Scalar my $USAGE => <<"EOF";
Usage:  $0 <command> [options]

Commands:
    list           Lists available modules
    fetch          Fetches RACHEL content

For help on a specific command, use:
    $0 help <command>
EOF

################################################################################

RachelPerlSetup::set_info_log_level();
my $COMMAND = shift @ARGV;
_usage() unless $COMMAND;

# Support the "$0 help <command>" syntax
my $HELP = ($COMMAND =~ m/^(help|-\?|--help|-h)$/);
$COMMAND = shift @ARGV if $HELP;
_usage() unless $COMMAND;

$COMMAND =~ s/^--//;
_usage() unless $COMMAND;

unshift @ARGV, '--help' if $HELP;

_invocation_error("Unrecognised command: $COMMAND") unless $COMMAND_HANDLERS{$COMMAND};

_process_command($COMMAND);
exit 0;

################################################################################

sub _invocation_error {
    my ($err) = @_;
    print STDERR "$err\n\n$USAGE\n";
    exit 1;
}

sub _usage {
    print $USAGE, "\n";
    exit 0;
}

sub _process_command {
    my ($command) = @_;

    # Find and load the handler for this package
    my $handler_module = $COMMAND_HANDLERS{$command};
    eval "require ${handler_module};";
    confess $EVAL_ERROR if $EVAL_ERROR;

    # Instantiate and run it
    my $handler = $handler_module->build_from_command_line();
    $handler->run();
    return;
}

